version: '3.8'

services:
  # PostgreSQL for Command Side (Write Operations)
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ecommerce_orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching (Query Side)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Management Service (Command Side)
  order-management-service:
    build:
      context: .
      dockerfile: order-management-service/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/ecommerce_orders?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC_ORDERS: orders
      LOG_LEVEL: info
    restart: unless-stopped

  # Order Reporting Service (Query Side)
  order-reporting-service:
    build:
      context: .
      dockerfile: order-reporting-service/Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:password@postgres:5432/ecommerce_orders?sslmode=disable
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC_ORDERS: orders
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: info
    restart: unless-stopped

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  redis_data:
